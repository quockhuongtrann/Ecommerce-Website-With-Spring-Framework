package com.shoptqk.order;

import java.util.Date;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.shoptqk.checkout.CheckoutInfo;
import com.shoptqk.common.entity.Address;
import com.shoptqk.common.entity.CartItem;
import com.shoptqk.common.entity.Customer;
import com.shoptqk.common.entity.order.Order;
import com.shoptqk.common.entity.order.OrderDetail;
import com.shoptqk.common.entity.order.OrderStatus;
import com.shoptqk.common.entity.order.OrderTrack;
import com.shoptqk.common.entity.order.PaymentMethod;
import com.shoptqk.common.entity.product.Product;

@Service
public class OrderService {
	@Autowired private OrderRepository orderRepository;
	public static final int ORDERS_PER_PAGE = 5;
	
	public Order createOrder(Customer customer, Address address, List<CartItem> cartItems,
			PaymentMethod paymentMethod, CheckoutInfo checkoutInfo) {
		Order newOrder = new Order();
		newOrder.setOrderTime(new Date());
		newOrder.setStatus(OrderStatus.NEW);
		newOrder.setCustomer(customer);
		newOrder.setProductCost(checkoutInfo.getProductCost());
		newOrder.setSubtotal(checkoutInfo.getProductTotal());
		newOrder.setShippingCost(checkoutInfo.getShippingCostTotal());
		newOrder.setTax(0.0f);
		newOrder.setTotal(checkoutInfo.getPaymentTotal());
		newOrder.setPaymentMethod(paymentMethod);
		newOrder.setDeliverDays(checkoutInfo.getDeliverDays());
		newOrder.setDeliverDate(checkoutInfo.getDeliverDate());
		
		if (address == null) {
			newOrder.copyAddressFromCustomer();
		} else {
			newOrder.copyShippingAddress(address);
		}
		
		Set<OrderDetail> orderDetails = newOrder.getOrderDetails();
		
		
		for (CartItem cartItem : cartItems) {
			Product product = cartItem.getProduct();
			
			OrderDetail orderDetail = new OrderDetail();
			orderDetail.setOrder(newOrder);
			orderDetail.setProduct(product);
			orderDetail.setQuantity(cartItem.getQuantity());
			orderDetail.setUnitPrice(product.getDiscountPrice());
			orderDetail.setProductCost(product.getCost() * cartItem.getQuantity());
			orderDetail.setSubTotal(cartItem.getSubTotal());
			orderDetail.setShippingCost(cartItem.getShippingCost());
			
			orderDetails.add(orderDetail);
		}
		
		List<OrderTrack> orderTracks = newOrder.getOrderTracks();
		OrderTrack orderTrack = new OrderTrack();
		orderTrack.setOrder(newOrder);
		orderTrack.setStatus(OrderStatus.NEW);
		orderTrack.setUpdatedTime(new Date());
		orderTrack.setNotes(OrderStatus.NEW.defaultDescription());
		orderTracks.add(orderTrack);
		
		return orderRepository.save(newOrder);
	}
	
	public Page<Order> listForCustomerByPage(Customer customer, int pageNum,
			String sortField, String sortDir, String keyword) {
		Sort sort = Sort.by(sortField);
		sort = sortDir.equals("asc") ? sort.ascending() : sort.descending();
		
		Pageable pageable = PageRequest.of(pageNum - 1, ORDERS_PER_PAGE, sort);
		
		if (keyword != null) {
			return orderRepository.findAll(keyword, customer.getId(), pageable);
		}
		
		return orderRepository.findAll(customer.getId(), pageable);
	}
	
	public Order getOrder(Integer id, Customer customer) {
		return orderRepository.findByIdAndCustomer(id, customer);
	}
}
